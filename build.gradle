plugins {

    id 'com.github.ben-manes.versions' version '0.29.0'
    id 'com.github.spotbugs' version '4.5.0' apply false
}

group 'se.fnord'
version '0.6-SNAPSHOT'

ext {
    isTravis = System.getenv('TRAVIS') ? true : false
    isRelease = !isTravis && !version.endsWith("SNAPSHOT")

    ossrhUsername = System.getenv('OSSRH_USERNAME')
    ossrhPassword = System.getenv('OSSRH_PASSWORD')
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'com.github.spotbugs'

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allJava
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }

    compileJava {
        options.compilerArgs << "-Xlint:all,-processing" << "-Werror"
    }

    compileTestJava {
        options.compilerArgs << "-Xlint:all,-processing" << "-Werror"
    }

    signing {
        required { isRelease && gradle.taskGraph.hasTask(":uploadArchives") }
        sign configurations.archives
    }

    test {
        useJUnitPlatform()
        testLogging {
            events = ['failed', 'skipped']
        }
    }

}

wrapper {
    gradleVersion = '6.6'
}

project(':log4j2-tagged-message') {
    dependencies {
        api "org.apache.logging.log4j:log4j-api:${log4j}"

        testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5}"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'Tagged message type for Log4J2'
                    url 'https://github.com/log4j2-logstash'

                    scm {
                        url 'scm:git:https://github.com/gsson/log4j2-logstash'
                        connection 'scm:git:git@github.com:/gsson/log4j2-logstash'
                        developerConnection 'scm:git:git@github.com:/gsson/log4j2-logstash'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'gsson'
                            name 'Henrik Gustafsson'
                        }
                    }
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }
        }
    }
}


project(':log4j2-logstash-layout') {
    dependencies {
        implementation "org.apache.logging.log4j:log4j-core:${log4j}"
        annotationProcessor "org.apache.logging.log4j:log4j-core:${log4j}"
        testAnnotationProcessor "org.apache.logging.log4j:log4j-core:${log4j}"
        implementation "org.apache.logging.log4j:log4j-api:${log4j}"
        implementation project(':log4j2-tagged-message')

        testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5}"
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junit5}")

        testImplementation "com.fasterxml.jackson.core:jackson-core:${jackson}"
        testImplementation "com.fasterxml.jackson.core:jackson-databind:${jackson}"
        testImplementation "net.javacrumbs.json-unit:json-unit:${jsonUnit}"
        testImplementation "net.javacrumbs.json-unit:json-unit-fluent:${jsonUnit}"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'Logstash json event layout for Log4J2'
                    url 'https://github.com/gsson/log4j2-logstash'

                    scm {
                        url 'scm:git:https://github.com/gsson/log4j2-logstash'
                        connection 'scm:git:git@github.com:/gsson/log4j2-logstash'
                        developerConnection 'scm:git:git@github.com:/gsson/log4j2-logstash'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'gsson'
                            name 'Henrik Gustafsson'
                        }
                    }
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }
        }
    }
}